##################################################################################
# ENDPOINT
##################################################################################

vra_url       = "https://xint-vra01.rainpole.io"
vra_api_token = "**********************************************"
vra_insecure  = false

##################################################################################
# CLOUD TEMPLATES (f.k.a. "BLUEPRINTS")
// NOTE: Must use '$$' for escape when using expressions.
##################################################################################

cloud_templates = {
  cloud_template0 = {
    name         = "Sample"
    description  = "Sample Cloud Template"
    project_name = "Sample"
    content      = <<-EOT
      name: Sample Cloud Template
      formatVersion: 1
      inputs:
        targetCloud:
          type: string
          oneOf:
            - title: Rainpole Private Cloud
              const: 'cloud:private'
          title: Cloud
          description: |-
            Select a cloud platform:<br/>
            <ul>
              <li>VMware Cloud Foundation</li>
            </ul>
          default: 'cloud:private'
        targetRegion:
          type: string
          oneOf:
            - title: San Francisco (US West 1)
              const: 'region:us-west-1'
            - title: Los Angeles (US West 2)
              const: 'region:us-west-2'
          title: Region
          description: |-
            Select a region:<br/>
            <ul>
              <li>San Francisco, California US (us-west-1)</li>
              <li>Los Angeles, California US (us-west-2)</li>
            </ul>
          default: 'region:us-west-1'
        targetEnvironment:
          type: string
          oneOf:
            - title: Production
              const: 'env:prod'
            - title: Development
              const: 'env:dev'
          title: Environment
          description: |-
            Select an environment:<br/>
            <ul>
              <li>Production</li>
              <li>Development</li>
            </ul>
          default: 'env:prod'
        operatingSystem:
          type: string
          oneOf:
            - title: Ubuntu Server LTS
              const: linux-ubuntu-server-lts
            - title: Microsoft Windows Server Standard
              const: windows-server-standard
          title: Operating System and Version
          description: |-
            Select an operating system and version.:<br/>
            <ul>
              <li>Ubuntu Server LTS</li>
              <li>Microsoft Windows Server Standard</li>
            </ul>
          default: linux-ubuntu-server-lts
        networkType:
          type: string
          oneOf:
            - title: Existing
              const: existing
            - title: On-Demand Routed
              const: routed
          title: NSX Network Segments
          description: |-
            Select an NSX segment type:<br/>
            <ul>
              <li>Existing NSX Segments</li>
              <li>On-Demand Routed NSX Segments</li>
            </ul>
          default: routed
        webNodeSize:
          type: string
          oneOf:
            - title: X-Small
              const: x-small
            - title: Small
              const: small
            - title: Medium
              const: medium
            - title: Large
              const: large
            - title: X-Large
              const: x-large
          title: Node Size for Web Tier
          description: |-
            Select the size for the node:<br/>
            <ul>
              <li><strong>X-Small</strong>: 1 vCPU x 1 GB Memory</li>
              <li><strong>Small</strong>: 2 vCPU x 2 GB Memory</li>
              <li><strong>Medium</strong>: 4 vCPU x 8 GB Memory</li>
              <li><strong>Large</strong>: 8 vCPU x 16 GB Memory</li>
              <li><strong>X-Large</strong>: 16 vCPU x 32 GB Memory</li>
            </ul>
          default: small
        webNodeCount:
          type: integer
          maximum: 10
          title: Node Count for Web Tier
          description: Select the number of VMs between 1 and 10.
          default: 1
        appNodeSize:
          type: string
          oneOf:
            - title: X-Small
              const: x-small
            - title: Small
              const: small
            - title: Medium
              const: medium
            - title: Large
              const: large
            - title: X-Large
              const: x-large
          title: Node Size for Application Tier
          description: |-
            Select the size for the node:<br/>
            <ul>
              <li><strong>X-Small</strong>: 1 vCPU x 1 GB Memory</li>
              <li><strong>Small</strong>: 2 vCPU x 2 GB Memory</li>
              <li><strong>Medium</strong>: 4 vCPU x 8 GB Memory</li>
              <li><strong>Large</strong>: 8 vCPU x 16 GB Memory</li>
              <li><strong>X-Large</strong>: 16 vCPU x 32 GB Memory</li>
            </ul>
          default: small
        appNodeCount:
          type: integer
          maximum: 10
          title: Node Count for App Tier
          description: Select the number of VMs between 1 and 10.
          default: 1
        dbNodeSize:
          type: string
          oneOf:
            - title: X-Small
              const: x-small
            - title: Small
              const: small
            - title: Medium
              const: medium
            - title: Large
              const: large
            - title: X-Large
              const: x-large
          title: Node Size for Database Tier
          description: |-
            Select the size for the node:<br/>
            <ul>
              <li><strong>X-Small</strong>: 1 vCPU x 1 GB Memory</li>
              <li><strong>Small</strong>: 2 vCPU x 2 GB Memory</li>
              <li><strong>Medium</strong>: 4 vCPU x 8 GB Memory</li>
              <li><strong>Large</strong>: 8 vCPU x 16 GB Memory</li>
              <li><strong>X-Large</strong>: 16 vCPU x 32 GB Memory</li>
            </ul>
          default: small
      resources:
        webVM:
          type: Cloud.vSphere.Machine
          properties:
            image: '$${input.operatingSystem}'
            flavor: '$${input.webNodeSize}'
            count: '$${input.webNodeCount}'
            customizationSpec: '$${input.operatingSystem}'
            networks:
              - network: '$${resource.network.id}'
                assignment: static
                securityGroups:
                  - '$${resource.webSG.id}'
            tags:
              - key: function
                value: web
            constraints:
              - tag: '$${input.targetCloud}'
              - tag: '$${input.targetRegion}'
        appVM:
          type: Cloud.vSphere.Machine
          properties:
            image: '$${input.operatingSystem}'
            flavor: '$${input.appNodeSize}'
            count: '$${input.appNodeCount}'
            customizationSpec: '$${input.operatingSystem}'
            networks:
              - network: '$${resource.network.id}'
                assignment: static
                securityGroups:
                  - '$${resource.appSG.id}'
            tags:
              - key: function
                value: app
            constraints:
              - tag: '$${input.targetCloud}'
              - tag: '$${input.targetRegion}'
        dbVM:
          type: Cloud.vSphere.Machine
          properties:
            image: '$${input.operatingSystem}'
            flavor: '$${input.dbNodeSize}'
            customizationSpec: '$${input.operatingSystem}'
            networks:
              - network: '$${resource.network.id}'
                assignment: static
                securityGroups:
                  - '$${resource.dbSG.id}'
            tags:
              - key: function
                value: db
            constraints:
              - tag: '$${input.targetCloud}'
              - tag: '$${input.targetRegion}'
        network:
          type: Cloud.NSX.Network
          properties:
            networkType: '$${input.networkType}'
            constraints:
              - tag: '$${input.targetEnvironment}'
              - tag: '$${input.networkType == "routed" ? "network:ondemand" : (input.networkType == "existing" ? "network:existing" : "network:ondemand")}'
        webSG:
          type: Cloud.SecurityGroup
          properties:
            securityGroupType: new
            rules:
              - name: any-web-https
                source: Any
                destination: '$${resource.webSG.id}'
                service: HTTPS
                direction: inbound
                access: Allow
        appSG:
          type: Cloud.SecurityGroup
          properties:
            securityGroupType: new
            rules:
              - name: web-app-https
                source: '$${resource.webSG.id}'
                destination: '$${resource.appSG.id}'
                service: HTTPS
                direction: inbound
                access: Allow
        dbSG:
          type: Cloud.SecurityGroup
          properties:
            securityGroupType: new
            rules:
              - name: app-db-postgresql
                source: '$${resource.appSG.id}'
                destination: '$${resource.dbSG.id}'
                service: PostgreSQL
                direction: inbound
                access: Allow
    EOT
    release_changelog   = "Initial release."
    release_description = "Sample Cloud Template"
    release_version     = "1.0.0"
    release_status      = true
  }
}